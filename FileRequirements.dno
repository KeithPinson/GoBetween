#! dno -version 0.1 -markup khand -tab 4

[[File Handler]]
The purpose of the file handler is to support the complexities of remote files beyond that of the standard file systems
As with any file system there are two complimentary parts:
    A file reader [[File Read]]
    And, a file writer [[File Write]]

[[File Read]]
A file reader consists of the following parts:
    A read cache [[Read Cache]]
    A listener [[Read Listener]]
    A file requester [[File Request]]
    A security package [[Read Security]]
    And, a handler [[Read Handler]]

[[Read Cache]]
The purpose of the read cache is to be a temporary local store, it must support:
    A contract that the file will not be removed during downloads/live updates [[Read Cache Reservation]]
    A configurable system to prioritize a file's place in the cache [[Read Cache Priorities]]
    A mechanism to date files, obscure local file names, and record the file request [[Read File Local Storage]]
    Removal of stale files and low priority files [[Read cache pruning]]

[[Read Listener]]
All files are assumed to be transmitted from a remote system. A listener exists to support:
    Remotely streamed files [[Read File Stream]]
    Live updates to a cached file [[Read Live Updates]]

[[File Request]]
To avoid resending files that exist in the cache a file request consists of a header with the following metadata:
    File URL [[File URL]]
    File Name [[File Name]]
    Metadata Version [[Metadata Version]]
    Packets in cache [[File Spanning]]
    Checksum of file [[File Checksum]]
    Hamming-like Code [[File Hamming-like Code]]

[[Read Security]]
To try and avoid security nightmares, the request of a file should be treated like an API request, where:
    Server host is obscured [[Host obscured]]
    API (file server) key stored remotely [[Remote key storage]]
    SSL (https) is used [[SSL transport]]

[[Host obscured]]

[[Remote key storage]]

[[SSL transport]]
We use the term SSL because it is a recognizable acronym, we really mean SSL/TSL, the layer upon which https packets are sent

     TLS v1.1 or greater, TLS v1.2 should be the first choice when negotiating the protocol
     2048 bit private keys
     Certificates should be renewed each year with new keys
     Private keys should be stored offline in an encrypted zip
     Certificates should be for URLs that will be used or accidentally used, eg. www.example.com, example.com, example.net
     Use SHA2 or better for signature authority
     Cipher suites should use 128 bit encryption or better
        The following cipher suites are not be permitted:
            Anonymous Diffie-Hellman (ADH)
            Null cipher suites
            Export key exchange
            Suites with less than 112 bit encryption
            RC4
            3DES (it is slow)
    Forward Secrecy (ECDHE suites), which roll the encryption forward so that the a discovered private key cannot decrypt old messages
    Client-Initiated Renegotiation should be disabled
    TLS Compression should be disabled
    SSL v3 should be disabled
    RC4 should be disabled
    Use persistent HTTP connections (keep-alives)
    Public resources like images should have the response header set to "Cache-Control: public" to enable them to be cached
    OCSP Stapling should be used
    All HTTP traffic should be over TLS (secured, as in HTTPS), including images, css, third-party links, everything
    Cookies should be secured
    HTTP Strict Transport Security (HSTS) should be deployed
    Sensitive information should not be cached

[[Read Handler]]
The read handler is responsible for assebling the received packets and passing them to a parser for conversion to the goBetween format

[[Metadata Version]]
Any major or minor change to the code that creates and stores the metadata must be given a version id
Old code once released is never touched, instead each version must have a new block of code to handle the metadata
A cached file may have a version of the metadata that is out of data
    An exception should not be thrown because the version is old
    A rebuild should not be required because the version is old
The identifying version number should be designed and stored in such a way that all versions will get the version number in exactly the same way

[[File URL]]
The URL should be should provide a string that can be used as a query
It should be possible alternate between encoded and decoded Percent Encoded formats

[[File Name]]
A unicode string should contain the file name as it should be displayed

[[File Spanning]]
A mechanism must exist to send files as packets, to be reassembled when the all the packets are received
An existing mechanism to support this should be used
It should be possible to restart a stalled download without the need to resend all the packets

[[File Checksum]]
A whole file has a checksum
The term checksum is generic and a sophistacted hash should be used that results in a guaranteed unique number

[[File Hamming-like Code]]
A metric must exist that can be used to compare one version of a file with another by the metric and determine how much the file has changed
The purpose of the metric is allow the cached version of a file to be displayed if it is not wildly different than the file to be streamed
The metric to be used is a code and the difference between two codes is the

[[File Write]]
A file writer consists of the following parts:
    A file store [[File Store]]
    A security package [[Write Security]]
    and, helpers to deliver the file [[Write Helpers]]