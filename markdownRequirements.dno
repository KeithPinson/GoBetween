#! dno -version 0.1 -markup khand -tab 4

// These requirements were drawn from the CommonMark Spec v0.21 however they diverge significantly
// with regards to which html tags can be used and on some other minor issues.

[[Markdown Document]]
Any sequence of characters is a valid document[[Characters]]

[[Characters]]
A character is a unicode code point.
No encoding is specified.

[[Lines]]
A line is a sequence of zero or more characters followed by an end of line[End of Line]]

[[End of Line]]
An end of line is one of the following:
    An end of File
    A newline (U+000A)
    A carriage return (U+000D)
    Or, a carriage return + newline (U+000D,U+000A)

[[Blank Line]]
A line containing no characters, or a line containing only spaces (U+0020) or tabs (U+0009), is called a blank line.

[[Whitespace Character]]
A whitespace character is either:
    space (U+0020)
    tab (U+0009)
    newline (U+000A)
    line tabulation (U+000B)
    form feed (U+000C)
    carriage return (U+000D)

[[Whitespace]]
Whitespace is a sequence of one or more whitespace characters[[Whitespace Character]]

[[Unicode Whitespace Character]]
A unicode whitespace character is any code point in the unicode Zs class, or a regular whitespace character[[Whitespace Character]]

[[Unicode Whitespace]]
Unicode whitespace is a sequence of one or more unicode whitespace characters[[Unicode Whitespace Character]]

[[Space]]
A space is U+0020.

[[Non Whitespace Character]]
A non-whitespace character is any character that is not a whitespace character[[Whitespace Character]]

[[ASCII Punctuation Character]]
An ASCII punctuation character is any one of the ASCII characters:
    (!, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, ~)

[[Punctuation Character]]
A punctuation character is an ASCII punctuation character or anything in the unicode classes Pc, Pd, Pe, Pf, Pi, Po, or Ps.

[[Tabs]]
Tabs in lines are not expanded to spaces

[[Indentation]]
When evaluating levels of indentation, a tab should behave as if replaced by 4 spaces

[[Unicode Zero]]
For security reasons, the Unicode character U+0000 must be replaced with the replacement character (U+FFFD)

[[Blocks]]
Conceptually a documents consists of a chain of block elements.
The block elements are:
    Paragraphs
    Block Quotes
    Lists
    List Items
    Headers
    Horizontal Rules[[Horizontal Rule]]
    Code Blocks

[[Inlines]]
Embedded in a line may be an inline element.
The inline elements are:
    Content-text
    Links
    Emphasized test
    Images
    Code

[[Precedence]]
Block elements take precedence over inline elements.
The following markup:
    {{{
    - `one
    - two`
    }}}

    should result generate the following html:
    {{{
    <ul>
    <li>`one</li>
    <li>two`</li>
    </ul>
    }}}

[[Sub-Blocks]]
Blocks that can be nested in another block are referred to as a sub-block
A sub-block can never span across its parent block boundary

[[Underlined Header]]

An underlined header takes precedence over a horizontal rule[[Horizontal Rule]]


[[Horizontal Rule]]
A horizontal rule cannot contain a sub-block
A horizontal rule takes precedence over a list item
A horizontal rule take precedence over a paragraph
It consists of a single line
It does not need to be preceded nor followed by a blank line
The line can have upto three leading whitespace characters[[Whitespace Character]]
It cannot have 4 or more leading whitespace characters[[Whitespace Character]]
It is identified by either of the three or more characters:
    *** (asterisks, U+002A)
    --- (hyphens, U+002D)
    ___ (under-bars, U+005F)
Any number of spaces can be inserted between or after the three or more characters
The three or more characters must all be the same, no mixing
Any other characters are besides space is not allowed
It should generate html: {{{<hr/>}}}

[[Headers]]
A header is a single line of characters
It can be identified in one of two ways, either:
    By hash (#) characters, as an ATX Header[[ATX Header]]
    Or, by a following line of (-) or (=), as Setext Header [[Setext Header]]
Headers are inlines[[Inlines]]
Leading and following whitespace characters are trimmed
It cannot be a sub-block of any other block

[[ATX Header]]
An ATX header is a header preceded by 1 to 6 hash characters (#) and a space
It can be preceded by up 3 whitespace characters
It can be followed by any number of whitespace characters
It can be followed by any number of hash (#) characters which are preceded by a space
Only hash (#) characters or spaces can surround the header characters
If two or more leading hash characters are used, they must be touching with no spaces between
It should generate the html header tag where the number of hashes is the heading level
An ATX Header can be empty, if so no spaces are required after or before the preceding or following hashes (#)
An empty header can have any number of whitespace characters including none if there is no following hash (#)
It is of high precedent than a paragraph

[[Setext Header]]
A Setext Header is a header followed on the next line by contiguous hyphen (-) or equal characters (=)[[Setext Underline]]
The inline text of a Setext header cannot be a blank line
It is a lower precedent than a paragraph

[[Setext Underline]]
Equals (=) generate html, <h1> tags
Hyphens (-) generate html, <h2> tags
Hyphens and equal signs cannot be mixed
Spaces or any other character cannot intersperse the hyphens or equal signs
One to a max of 120 hyphens or equal signs can be used
It can be preceded by up 3 whitespace characters
It can be followed by any number of whitespace characters

[[Code Blocks]]
Code is characters or lines of characters
It can be identfied in one of two ways, either:
  By indenting[[Indented Code Block Lines]]
  Or, by fencing[[Fenced Code Block]]
Code blocks are not inlines and require no further processing
Code blocks should be transformed to html as the code block surrounded by the <pre> and <code> tags

[[Indented Code Block Lines]]
Indented code block lines are identified by 4 whitespace characters or a tab character
The leading 4 whitespace characters or the tab are not included in the code block
A code block may contain leading whitespace characters
Adjoining indented code block lines are all a part of the same code block
A blank line is considered part of a code block if it is surrounded by code block lines
Paragraphs are of lower precedence
Lists are of higher precedence

[[Fenced Code Block]]
A code block fence is identified by triple backticks (```) or tildes (~~~) surrounding the code
Additional backticks (`) or tildes (~) can adjoin the triples and will be considered part of the fence not the code
The closing triple and its additional backticks (`) or tildes (~) must in at least number the opening fence
Backticks (`) or tildes (~) in the closing fence beyond the number in the opening fence are valid and considered as part of the closing fence
The opening and closing fence can have upto three leading whitespace characters
The number leading white spaces of the opening fence is assumed to be the indentation of the code block and that number of leading spaces will be removed from each code block line
Whatespace cannot be interleaved between the triples
If no closing fence exists the code block is assumed to continue until the end of the document
A fenced code block can have an info string[[Code Info String]]

[[Code Info String]]
The first word following the opening fence will be used to create a "class" attribute of the html <code> tag
The "class" attribute be set equal to the string "language-" with the word appended to it, eg. class="language-ruby"
If the opening fence begins a line all characters on that line are assumed to be a part of the code info string
If a space follows the opening fence the word that follows if one exists is used to compose the class attribute
If a space follows the opening fence and there are characters beyond the first word and the fence begins a line then the addional characters are considered part of the fence and ignored
If no space follows then the characters following the last backtick (`) or tilde (~) until the end of line or whitespace is used to compose the class attribute
If the opening fence does not begin a line then the code info string can only consist of a single word and must adjoin the opening fence with no spaces

[[HTML Markup]]
Html Markup may be copied and pasted into a document, so all HTML Markup should be processed
For the purposes of markdown we are only concerned with a subset of html, but still we must be able to identify the following declarations:
    Html comment[[HTML Comment]]
    Xml Declaration[[XML Declaration]]
    Doctype Declaration[[Doctype Declaration]]
    Character Data[[Character Data]]
    Html Tag[[HTML Tag]]
Code blocks have a higher precedence

[[HTML Comment]]
An html comment is preserved and is inserted into the resulting document un altered
A Html comment has an opening sequence of of 4 characters, <!--
It can be followed by any characters including newlines and carriage returns
It is terminated by 3 characters, -->

[[XML Declaration]]
An Xml declaration is identified and then ignored and dropped from the generated document
An Xml declration starts with 2 characters, <?
It is followed by characters including newlines and carriage returns
It is terminated by 2 characters, ?>

[[Doctype Declaration]]
A doctype declaration is identified and the ignored and dropped from the generated document
It starts with 2 characters, <!
It is supposed to be the first declaration in an html file, but we will identify it if it is misplaced
It can contain any characters including carriage return and newline
It is terminated by a single greater-than (>)

[[Character Data]]
Character Data is typically used with Xml and scripts, it is to be ignored and dropped from the generated document
It starts with the following sequence of 9 characters, <![CDATA[
It can contain any character including newlines and carriage returns
It is terminated with the just 3 characters, ]]>

[[Html Tag]]
All Html tags can be identified by
    A tag name[[Tag Name]]
    An opening tag[[Opening Tag]]
    A closing tag[[Closing Tag]]
    Or, a standalone tag[[Standalone Tag]]
Any accepted tag including the characters between an opening and closing tag are passed to the generated document
Any tags that are not acceptable including characters between the opening and closing tags are ignored and dropped from the generated document

[[Tag Name]]
A tag name is not case sensitive
It must begin with an alpha character
It can be upto 126 characters in length
After the first character any character can be alphanumeric or under-bar (_), not space
A subset of tag names are valid for Markdown[[Accepted Tag Names]]

[[Opening Tag]]
An opening tag consists of less-than (<) character, a tag name, optionally some attributes, and then an ending greater-than (>) character

[[Closing Tag]]
A closing tag has a matching tag name, it consists of less-than (<), a slash (/), the tag name, optionally whitespace, and a greater-than (>) character

[[Standalone Tag]]
A standalone tag consists of a less-than (<) character, a tag name, optionally whitespace, and a greater-than (>) character

[[Accepted Tag Names]]
Only the following list of names are acceptable (they are not case-sensitive)
    address
    article
    aside
    blockquote
    caption
    center
    col
    colgroup
    dd
    details
    dialog
    dir
    div
    dl
    dt
    fieldset
    figcaption
    figure
    footer
    form
    frame
    frameset
    h1
    header
    hr
    legend
    li
    link
    main
    menu
    menuitem
    nav
    noframes
    ol
    optgroup
    option
    p
    param
    pre
    section
    source
    summary
    table
    tbody
    td
    tfoot
    th
    thead
    title
    tr
    track
    ul
The "title" tag is child element of the head element
The other tags are children or siblings of the body element
